<?php

namespace Tests\Feature;

use App\Models\Article;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class ArticleTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->artisan('migrate --seed');

    }

    /** @test */
    public function it_index_enpoint_exists()
    {
        $this->getJson(route('articles.index'))->assertOk();
    }

    /** @test */
    public function it_should_get_index_data()
    {
        $articles = Article::factory(5)
            ->create();

        $response = $this->getJson(route('articles.index'))->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json->has('status')
            ->has('message')
            ->has('meta')
            ->has('links')
            ->has('data', 5, fn ($json) => $json
                ->where('id', $articles->first()->id)
                ->where('title', $articles->first()->title)
                ->where('article', $articles->first()->article)
                ->where('url', $articles->first()->path(true))
                ->has('author')
                ->etc())

            ->etc()
        );
    }

    /** @test */
    public function it_should_get_article_by_quantity()
    {
        Article::factory(50)->create();

        $article = Article::latest()->first();
        $response = $this->getJson(route('articles.index', [
            'quantity' => 20,

        ]))->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json->has('status')
            ->has('message')
            ->has('meta')
            ->has('links')
            ->has('data', 20)

            ->etc()
        );
    }

    /** @test */
    public function it_should_show_an_article()
    {
        $articles = Article::factory(5)
            ->create();

        $response = $this->getJson($articles->first()->path())->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->has('status')
            ->has('message')
            ->where('data.id', $articles->first()->id)
            ->where('data.title', $articles->first()->title)
            ->where('data.article', $articles->first()->article)
            ->where('data.url', $articles->first()->path(true))
            ->has('data.author')
            ->etc()
        );
    }

    /** @test */
    public function it_should_get_article_like_count()
    {
        $article = Article::factory()
            ->create();

        $response = $this->getJson($article->path().'/like')->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->has('status')
            ->has('message')
            ->where('data.like_count', $article->likeCount())
            ->etc()
        );
    }

    /** @test */
    public function it_should_get_article_view_count()
    {
        $article = Article::factory()
            ->create();

        $response = $this->getJson($article->path().'/view')->assertOk();

        $response->assertJson(fn (AssertableJson $json) => $json
            ->has('status')
            ->has('message')
            ->where('data.view_count', $article->views)
            ->etc()
        );
    }

//    /** @test */
//    public function author_should_edit_owns_article()
//    {
//
//        $this->markTestSkipped();
//    }

}
